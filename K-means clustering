import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import pandas as pd
import matplotlib.pyplot as plt

# Sample data (replace this with your actual dataset)
data = {
    'CustomerID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'AmountSpent': [200, 150, 300, 120, 180, 250, 320, 200, 280, 350],
    'Frequency': [5, 3, 6, 4, 5, 7, 8, 6, 7, 9],
    'Recency': [10, 8, 5, 9, 7, 6, 4, 8, 6, 3]
}

df = pd.DataFrame(data)

# Select features for clustering
X = df[['AmountSpent', 'Frequency', 'Recency']]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Choose the number of clusters (you can adjust this based on your specific case)
num_clusters = 3

# Apply K-means clustering
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_scaled)

# Print cluster centers
print("Cluster Centers:")
print(scaler.inverse_transform(kmeans.cluster_centers_))

# Visualize the clusters
colors = ['red', 'green', 'blue']
for cluster_num in range(num_clusters):
    cluster_data = df[df['Cluster'] == cluster_num]
    plt.scatter(cluster_data['AmountSpent'], cluster_data['Frequency'], c=colors[cluster_num], label=f'Cluster {cluster_num}')

plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', label='Centroids')
plt.xlabel('Amount Spent')
plt.ylabel('Frequency')
plt.title('Customer Segmentation')
plt.legend()
plt.show()
